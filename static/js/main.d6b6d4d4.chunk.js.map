{"version":3,"sources":["components/ImgCard.js","components/InfoBar.js","App.js","index.js"],"names":["ImgCard","props","url","src","className","onClick","alt","val","InfoBar","style","color","message","score","topScore","App","state","shuffled","clicked","background","componentDidMount","shuffle","handleClick","num","includes","length","setState","images","idx","Math","floor","random","push","this","map","img","key","React","Component","ReactDOM","render","document","getElementById"],"mappings":"yNAaeA,MAXf,SAAiBC,GACb,IAAMC,EAAM,uBAAyBD,EAAME,IAC3C,OAEI,yBAAKC,UAAU,SACX,yBAAKA,UAAU,aAAaC,QAASJ,EAAMI,QAASF,IAAKD,EAAKI,IAAKL,EAAME,IAAKI,IAAKN,EAAMM,QCUtFC,MAff,SAAiBP,GAEb,OAEI,4BAAQG,UAAU,UAAUK,MAAOR,EAAMS,OACrC,2CACA,2BAAIT,EAAMU,SACV,6BACI,qCAAWV,EAAMW,MAAjB,qBAA0CX,EAAMY,aC2IjDC,E,2MA9IbC,MAAQ,CACNC,SAAU,GACVC,QAAS,GACTJ,SAAU,EACVD,MAAO,EACPD,QAAS,+CACTD,MAAO,CAAEQ,WAAY,Y,EAIvBC,kBAAoB,WAClB,EAAKC,W,EAIPC,YAAc,SAACC,GAEb,IAAIL,EAAU,EAAKF,MAAME,QACrBJ,EAAW,EAAKE,MAAMF,SACtBD,EAAQ,EAAKG,MAAMH,MACnBF,EAAQ,EAAKK,MAAML,MACnBC,EAAU,GAGTM,EAAQM,SAASD,IAOpBX,EAAU,wBACVC,EAAQ,EACRF,EAAQ,CAAEQ,WAAY,OACtBD,EAAU,KATVL,IACAK,EAAO,sBAAOA,GAAP,CAAgBK,IACvBX,EAAU,uBACVD,EAAQ,CAAEQ,WAAY,YASpBN,EAAQC,IACVA,EAAWD,GAGTA,IAAU,EAAKG,MAAMC,SAASQ,SAChCb,EAAU,sCACVD,EAAQ,CAAEQ,WAAY,SACtBD,EAAU,GACVL,EAAQ,GAGV,EAAKa,SAAS,CAAER,QAASA,EAASL,MAAOA,EAAOC,SAAUA,EAAUF,QAASA,EAASD,MAAOA,IAC7F,EAAKU,W,EAIPA,QAAU,WAmDR,IAlDA,IAAMM,EAAS,CAAC,CACdJ,IAAK,EACLpB,IAAK,iBAEP,CACEoB,IAAK,EACLpB,IAAK,6BAEP,CACEoB,IAAK,EACLpB,IAAK,oBAEP,CACEoB,IAAK,EACLpB,IAAK,sBAEP,CACEoB,IAAK,EACLpB,IAAK,oBAEP,CACEoB,IAAK,EACLpB,IAAK,kBAEP,CACEoB,IAAK,EACLpB,IAAK,kBAEP,CACEoB,IAAK,EACLpB,IAAK,sBAEP,CACEoB,IAAK,EACLpB,IAAK,4BAEP,CACEoB,IAAK,EACLpB,IAAK,qBAEP,CACEoB,IAAK,GACLpB,IAAK,kBAEP,CACEoB,IAAK,GACLpB,IAAK,+BAEDc,EAAW,GAEVA,EAASQ,OAASE,EAAOF,QAAQ,CACtC,IAAIG,EAAMC,KAAKC,MAAsB,GAAhBD,KAAKE,UACrBd,EAASO,SAASG,EAAOC,KAC5BX,EAASe,KAAKL,EAAOC,IAIzB,EAAKF,SAAS,CAAET,SAAUA,K,wEAKlB,IAAD,OACP,OACE,oCACE,kBAAC,EAAD,CACEJ,MAAOoB,KAAKjB,MAAMH,MAClBC,SAAUmB,KAAKjB,MAAMF,SACrBF,QAASqB,KAAKjB,MAAMJ,QACpBD,MAAOsB,KAAKjB,MAAML,QAEpB,yBAAKN,UAAU,0BACb,yBAAKA,UAAU,OACZ4B,KAAKjB,MAAMC,SAASiB,KAAI,SAACC,GAAD,OACvB,kBAAC,EAAD,CACE7B,QAAS,kBAAM,EAAKgB,YAAYa,EAAIZ,MACpCa,IAAKD,EAAIhC,IACTC,IAAK+B,EAAIhC,gB,GArIPkC,IAAMC,WCDxBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.d6b6d4d4.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction ImgCard(props) {\r\n    const url = \"assets/click_images/\" + props.src;\r\n    return (\r\n\r\n        <div className=\"col-4\">\r\n            <img className=\"clickImage\" onClick={props.onClick} src={url} alt={props.src} val={props.val} />\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default ImgCard;","import React from \"react\";\r\n\r\nfunction InfoBar(props) {\r\n\r\n    return (\r\n\r\n        <header className=\"infoBar\" style={props.color}>\r\n            <h1>Clicky Crab</h1>\r\n            <p>{props.message}</p>\r\n            <div>\r\n                <p>Score: {props.score}   |   Top Score: {props.topScore}</p>\r\n            </div>\r\n        </header>\r\n\r\n    );\r\n}\r\n\r\nexport default InfoBar;","import React from 'react';\nimport './App.css';\nimport ImgCard from './components/ImgCard';\nimport InfoBar from './components/InfoBar'\n\nclass App extends React.Component {\n\n  state = {\n    shuffled: [],\n    clicked: [],\n    topScore: 0,\n    score: 0,\n    message: \"Click on each crab only once to earn points!\",\n    color: { background: \"#0f4b71\" }\n  }\n\n  //displays shuffled images on initial load\n  componentDidMount = () => {\n    this.shuffle();\n  }\n\n  //records image clicked\n  handleClick = (num) => {\n\n    let clicked = this.state.clicked;\n    let topScore = this.state.topScore;\n    let score = this.state.score;\n    let color = this.state.color;\n    let message = \"\";\n\n    //Adds number to array\n    if (!clicked.includes(num)) {\n      score++;\n      clicked = [...clicked, num]\n      message = \"Correct! Keep going!\"\n      color = { background: \"#0f4b71\" };\n\n    } else {\n      message = \"Game over! Try again!\";\n      score = 0;\n      color = { background: \"red\" };\n      clicked = [];\n    };\n\n    if (score > topScore) {\n      topScore = score;\n    }\n\n    if (score === this.state.shuffled.length) {\n      message = \"Congratulations! All crabs clicked!\"\n      color = { background: \"green\" };\n      clicked = [];\n      score = 0;\n    }\n\n    this.setState({ clicked: clicked, score: score, topScore: topScore, message: message, color: color })\n    this.shuffle();\n  }\n\n  //shuffles images\n  shuffle = () => {\n    const images = [{\n      num: 0,\n      url: \"blue-crab.jpg\"\n    },\n    {\n      num: 1,\n      url: \"caribbean-hermit-crab.jpg\"\n    },\n    {\n      num: 2,\n      url: \"coconut-crab.jpg\"\n    },\n    {\n      num: 3,\n      url: \"dungeness-crab.jpg\"\n    },\n    {\n      num: 4,\n      url: \"fiddler-crab.jpg\"\n    },\n    {\n      num: 5,\n      url: \"ghost-crab.jpg\"\n    },\n    {\n      num: 6,\n      url: \"green-crab.jpg\"\n    },\n    {\n      num: 7,\n      url: \"halloween-crab.jpg\"\n    },\n    {\n      num: 8,\n      url: \"japanese-spider-crab.jpg\"\n    },\n    {\n      num: 9,\n      url: \"red-claw-crab.jpg\"\n    },\n    {\n      num: 10,\n      url: \"stone-crab.jpg\"\n    },\n    {\n      num: 11,\n      url: \"strawberry-hermit-crab.jpg\"\n    }];\n    const shuffled = [];\n\n    while (shuffled.length < images.length) {\n      let idx = Math.floor(Math.random() * 12);\n      if (!shuffled.includes(images[idx])) {\n        shuffled.push(images[idx]);\n      };\n    }\n\n    this.setState({ shuffled: shuffled })\n\n  }\n\n  //renders images\n  render() {\n    return (\n      <>\n        <InfoBar\n          score={this.state.score}\n          topScore={this.state.topScore}\n          message={this.state.message}\n          color={this.state.color}\n        />\n        <div className=\"container imgcontainer\">\n          <div className=\"row\">\n            {this.state.shuffled.map((img) => (\n              <ImgCard\n                onClick={() => this.handleClick(img.num)}\n                key={img.url}\n                src={img.url}\n              />\n            ))}\n          </div>\n        </div>\n      </>\n    );\n  }\n};\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}